#!/usr/bin/env python3
"""
Generate Go files from wordlist text files.
Converts answers.txt and guesses.txt into Go source files with
global variables for efficient loading into service memory.
"""

import sys
from pathlib import Path


def read_wordlist(filepath):
    """Read words from a text file, one word per line."""
    words = []
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            for line in f:
                word = line.strip().upper()
                if word:  # Skip empty lines
                    words.append(word)
        return words
    except FileNotFoundError:
        print(f"Error: File not found: {filepath}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Error reading file {filepath}: {e}", file=sys.stderr)
        sys.exit(1)


def generate_go_file(words, var_name, output_path):
    """Generate a Go file with a global variable containing the words."""

    # Go file header
    go_code = '''// Code generated by generate_wordlists.py - DO NOT EDIT.
package data

// {var_name} contains the complete wordlist loaded into memory at startup.
// This provides O(1) lookup performance for word validation.
var {var_name} = []string{{
'''.format(var_name=var_name)

    # Add words with proper formatting
    for i, word in enumerate(words):
        # Add 10 words per line for readability
        if i % 10 == 0:
            go_code += '\t'
        go_code += f'"{word}", '
        if (i + 1) % 10 == 0:
            go_code += '\n'

    # Ensure proper formatting at the end
    if words:
        # Remove trailing space but keep the comma
        go_code = go_code.rstrip(' ')
        if not go_code.endswith('\n'):
            go_code += '\n'

    go_code += '}\n'
    
    # Write to file
    try:
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(go_code)
        print(f"✓ Generated {output_path} with {len(words)} words")
    except Exception as e:
        print(f"Error writing file {output_path}: {e}", file=sys.stderr)
        sys.exit(1)


def main():
    """Main entry point."""
    # Get the backend directory
    script_dir = Path(__file__).parent
    backend_dir = script_dir.parent
    data_dir = backend_dir / 'data'
    
    # Input files
    answers_file = data_dir / 'answers.txt'
    guesses_file = data_dir / 'guesses.txt'
    
    # Output files
    answers_go = data_dir / 'answers.go'
    guesses_go = data_dir / 'guesses.go'
    
    print("Generating Go wordlist files...")
    print(f"Backend directory: {backend_dir}")
    print(f"Data directory: {data_dir}")
    print()
    
    # Generate answers.go
    if answers_file.exists():
        print(f"Reading {answers_file}...")
        answers = read_wordlist(answers_file)
        generate_go_file(answers, 'Answers', answers_go)
    else:
        print(f"Warning: {answers_file} not found, skipping", 
              file=sys.stderr)
    
    # Generate guesses.go
    if guesses_file.exists():
        print(f"Reading {guesses_file}...")
        guesses = read_wordlist(guesses_file)
        generate_go_file(guesses, 'Guesses', guesses_go)
    else:
        print(f"Warning: {guesses_file} not found, skipping", 
              file=sys.stderr)
    
    print()
    print("✓ Done! Generated Go files are ready to use.")
    print()
    print("Next steps:")
    print("1. Import the data package in your handlers")
    print("2. Use data.Answers and data.Guesses in your code")
    print("3. Consider creating a helper function to convert to map for O(1) lookup")


if __name__ == '__main__':
    main()

